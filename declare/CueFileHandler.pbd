Declare closeSCSCueFile(nFileNo)
Declare close2ndSCSCueFile(nFileNo)
Declare.s decodeFileName(sStoredName.s, bPrimaryFile=#True, bConvertForwardSlashToBackSlash=#True, bCollecting=#False, bTemplate=#False, sCueFolder.s="")
Declare.s fieldDecode(pField.s)
Declare.s fieldEncode(pField.s)
Declare lineCount(sFileName.s)
Declare.s setDecSepForLocale(sData.s)
Declare.s encodeFileName(sFileName.s, bCollecting=#False, bTemplate=#False)
Declare nextInputChar(nFileNo, nStringFormat)
Declare nextInputTag(nFileNo, nStringFormat)
Declare nextInputData(nFileNo, nStringFormat)
Declare openSCSCueFile(bCreateFromTemplate=#False, bTemplate=#False)
Declare open2ndSCSCueFile()
Declare propagateFileInfo()
Declare initProd()
Declare clearCueFile()
Declare readNoCueFile()
Declare getDevTypeFromLogicalDev(*rProd.tyProd, nDevGrp, sLogicalDev.s)
Declare readXMLCueFile(nFileNo, bPrimaryFile, nStringFormat, sCueFile.s, bCreateFromTemplate=#False, bTemplate=#False)
Declare confirmOldFormat(sThisCueFile.s, nSaveAsFormat, sTitle.s)
Declare writeXMLCueFile(bExport, bCopyFiles, bForceNewProdId=#False, bCollecting=#False, bTemplate=#False)
Declare writeXMLRecoveryFile()
Declare setCueDetailsInMain()
Declare.s readDBLevel(sDBLevel.s)
Declare.s unloadDBLevel(sDBLevel.s)
Declare writeSubHeader(nFileNo, pSubPtr)
Declare writeCueMarkersForAud(nFileNo, nAudPtr)
Declare unloadGrid(nFileNo, bRecovery, bExport, bCopyFiles, bCollecting=#False, bTemplate=#False)
Declare.s unloadProd(nFileNo, bRecovery, bExport, sExportTitle.s, bForceNewProdId, bCollecting=#False, bTemplate=#False)
Declare unloadCtrlSetup(nFileNo)
Declare writeXMLHeader(nFileNo)
Declare writeTag(nFileNo, sTag.s)
Declare writeTagWithAttribute(nFileNo, sTag.s, sAttributeName.s, sAttributeValue.s)
Declare writeTagWithContent(nFileNo, sTag.s, sContent.s)
Declare writeTagWithContentAndAttributes(nFileNo, sTag.s, sContent.s, sAttributeName1.s, sAttributeValue1.s, sAttributeName2.s="", sAttributeValue2.s="")
Declare writeTagIfReqd(nFileNo, sTag.s, sValue.s, sDefault.s="")
Declare writeUnTag(nFileNo, sTag.s)
Declare.s XMLDecode(sXMLString.s)
Declare.s XMLEncode(sXMLString.s)
Declare askForVersion(bPrimaryFile)
Declare getRecoveryFileInfo()
Declare addXMLNode(*nParentNode, sNodeName.s)
Declare addXMLNodeWithAttributes(*nParentNode, sNodeName.s, sAttributeName1.s, sAttributeValue1.s, sAttributeName2.s="", sAttributeValue2.s="")
Declare addXMLItem(*nParentNode, sNodeName.s, sNodeValue.s)
Declare addXMLItemIfReqd(*nParentNode, sNodeName.s, sNodeValue.s, sDefaultValue.s="")
Declare addXMLItemWithAttribute(*nParentNode, sNodeName.s, sAttributeName.s, sAttributeValue.s, sNodeValue.s)
Declare addXMLItemWithAttributeIfReqd(*nParentNode, sNodeName.s, sAttributeName.s, sAttributeValue.s, sNodeValue.s, sDefaultValue.s="")
Declare.s convertSerialPortNameToPB(sOldSerialPortName.s)
Declare openMostRecentFile()
Declare openSelectedFile(sFileName.s, bCreateFromTemplate=#False, bTemplate=#False)
Declare openRecentFile(pFileNr)
Declare closeAndReopenCurrCueFile()
Declare loadCueFile(bCreateFromTemplate=#False, bTemplate=#False)
Declare closeCueFile()
Declare newCueFile()
Declare saveFormattedXML(xmlId, xmlFile.s, flags=0, indentStep=2)
Declare removeUnusedDevices()
Declare convertSCS10SpecialNotes(bPrimaryFile)
Declare addCtrlSendLogicalDevIfReqd(nDevType, sLogicalDev.s, bPrimaryFile)
Declare addVidAudLogicalDevIfReqd(*rProd.tyProd, sLogicalDev.s)
Declare convertSCS10VideoImageCues(bPrimaryFile)
Declare convertSCS10CtrlSendCues(bPrimaryFile)
Declare.s suggestFileNameFromTitle(sProdTitle.s)
Declare mapCtrlLogicalDevsToPhysicalDevs()
Declare mapLiveLogicalDevsToPhysicalDevs()
Declare doDatabaseUpdate(nDatabase, sSQLRequest.s, bTrace=#False)
Declare.s RepQuote(sInstring.s)
Declare.s KillQuote(sInstring.s)
Declare createTableFileData(nDatabaseNo)
Declare createTableFileStats(nDatabaseNo)
Declare createTableProgSldrs(nDatabaseNo)
Declare createTableImageData(nDatabaseNo)
Declare createTableImageFrames(nDatabaseNo)
Declare createTableCueStartDMXSave(nDatabaseNo)
Declare createTablePlaylistOrder(nDatabaseNo)
Declare loadPlaylistOrderFromDatabase(pSubPtr)
Declare savePlaylistOrdersToProdDatabase()
Declare createTempDatabase()
Declare openProdDatabase()
Declare loadTempDatabaseFromProdDatabase()
Declare setPeakAndMinDataPopulateStates()
Declare createProdDatabase()
Declare createProdDatabaseIfReqd()
Declare saveProgSldrGraphToTempDatabase(*rMG.tyMG, *mPeakAndMinData, nMemorySize, fNormalizeFactor.f, nGraphWidth)
Declare saveGraphDataToTempDatabase(nFileDataPtr, *mSlicePeakAndMinData, nMemorySize, fNormalizeFactor.f, nGraphWidth, nGraphChannels, nViewStart, nViewEnd)
Declare readFileBlob(*rMG.tyMG, nFileDataPtr)
Declare readProgSldrGraphFromTempDatabase(pAudPtr)
Declare readImageFromTempDatabase(sFileName.s, nWidth, nHeight, sSizeEtc.s, nFilePos, bTrace=#False)
Declare saveImageDataToTempDatabase(pAudPtr, nImageNo, nFilePos=0, bTrace=#False)
Declare saveFileStatsToTempDatabase(pAudPtr)
Declare compareTableStructures(sTableName.s)
Declare copyFileDataToProdDatabase()
Declare copyFileStatsToProdDatabase()
Declare copyProgSldrsToProdDatabase()
Declare copyImageDataToProdDatabase()
Declare checkForDuplicateFileDataEntries(nDatabaseNo)
Declare copyTableFromProdDatabaseToTempDatabase(sTableName.s)
Declare copyTableFromTempDatabaseToProdDatabase(sTableName.s)
Declare closeTempDatabase()
Declare.s buildSizeEtc(pAudPtr)
Declare sortLevelPointsArray(pAudPtr)
Declare getAudDevNoForLogicalDev(pAudPtr, sLogicalDev.s, sTracks.s)
Declare getNrOfOutputChansForLogicalDev(nDevType, sLogicalDev.s)
Declare getDevNoForLogicalDev(*rProd.tyProd, nDevGrp, sLogicalDev.s)
Declare getDevIdForLogicalDev(*rProd.tyProd, nDevGrp, sLogicalDev.s)
Declare getDevNoForFreeDev(*rProd.tyProd, nDevGrp)
Declare getDevNoForInputForLTCDev(*rProd.tyProd)
Declare.s getLogicalDevForInputForLTCDev(*rProd.tyProd)
Declare getPanAvailableForLogicalDev(sLogicalDev.s)
Declare setGraphChannelsForLogicalDev(pCaller, sLogicalDev.s)
Declare calcLevelsForDevNo(pCaller, pAudPtr, pDevNo, nGraphChannels)
Declare calcLevelsForPos(pCaller, pAudPtr, pDevNo, nPosInFile) ;, nGraphChannels)
Declare.s makeProdTimerHistFileName(bUseWPTFields=#False)
Declare saveProdTimerHistIfReqd()
Declare listFileDataArray()
Declare listFileStatsArray()
Declare listDatabaseFileData(nDatabaseNo)
Declare listDatabaseProgSldrsData(nDatabaseNo)
Declare findDuplicateFileDataRows(nDatabaseNo)
Declare getDatabaseChangesCount(nDatabaseNo)
Declare.s getTitleFromCueFile(sFileName.s)
Declare.s getProdIdFromCueFile(sFileName.s)
Declare.s getDescFromTemplateFile(sFileName.s)
Declare loadTemplatesArray()
Declare scanXMLTemplateFile(*CurrentNode, CurrentSublevel)
Declare incLastTmDev()
Declare.s readXMLTemplateFile(sFileName.s)
Declare updateOrCreateXMLNode(nParentNode, sPath.s, sNodeText.s, nPreviousNode=-1)
Declare deleteXMLNodePath(nParentNode, sPath.s)
Declare scanXMLTemplate(*CurrentNode, CurrentSublevel, nTemplatePtr)
Declare saveXMLTemplateFile(nTemplatePtr, bCreateFromCueFile)
Declare getTemplatePtr(sTemplateFileName.s)
Declare setCurrTemplateFileNames()
Declare renameTemplateFilesIfReqd()
Declare countFileStatsToBeObtainedForSub(pSubPtr)
Declare getFileStats(pAudPtr)
Declare listDatabaseFileStats(nDatabaseNo)
Declare loadFileStatsArrayFromProdDatabase()
Declare setFileStatsPtrs()
Declare getFixTypeIndexForFixture(*rProd.tyProd, *rSub.tySub, sFixtureCode.s)
Declare getTotalChansForFixture(*rProd.tyProd, *rSub.tySub, sFixtureCode.s)
Declare.s getFixtureTypeForLightingDeviceFixtureCode(*rProd.tyProd, sLogicalDev.s, sFixtureCode.s)
Declare getFixtureDfltStartChanForLightingDeviceFixtureCode(*rProd.tyProd, sLogicalDev.s, sFixtureCode.s)
Declare getTotalChansForFixtureType(*rProd.tyProd, sFixtureType.s)
Declare syncLightingSubForFixtures(*rProd.tyProd, *rSub.tySub, nChaseStepIndex=-1, nFixtureIndex=-1)
Declare.s SizeIt(Value.q)
Declare getDriveFreeSpace(sDrive.s)
Declare setLightingPre118Flag(*rProd.tyProd)
Declare setVideoFilePresent()
Declare getCtrlMidiRemoteDevForLogicalDev(sCSLogicalDev.s)
Declare.s getCtrlMidiRemoteDevCodeForLogicalDev(sCSLogicalDev.s)
Declare getCtrlMidiChannelForLogicalDev(sCSLogicalDev.s)
Declare addOneAudioLogicalDev(*rProd.tyProd)
Declare addOneVidAudLogicalDev(*rProd.tyProd)
Declare addOneVidCapLogicalDev(*rProd.tyProd)
Declare addOneFixType(*rProd.tyProd)
Declare addOneLightingLogicalDev(*rProd.tyProd)
Declare addOneCtrlSendLogicalDev(*rProd.tyProd)
Declare addOneCueCtrlLogicalDev(*rProd.tyProd)
Declare addOneLiveInputLogicalDev(*rProd.tyProd)
Declare addOneInGrp(*rProd.tyProd)
Declare addOneInGrpLiveInput(*rProd.tyProd, nInGrpNo)
Declare scanCueFileItems(*CurrentNode, CurrentSublevel)
Declare.s countCueFileItems(sCueFileName.s)
Declare initProdArrays(*rProd.tyProd)
Declare checkProdArraysAllowForNewEntry(*rProd.tyProd)
Declare mergeMemoRTFText(nFileNo, nStringFormat)
