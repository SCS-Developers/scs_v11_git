Declare debugProcAll(sProcName.s, sMessage.s, sThreadNo.s, sLogGroup.s, sFilename.s, nLineNo, bMutexAlreadyLocked=#False)
Declare debugMsgProcAll(sProcName.s, sMessage.s, sThreadNo.s, sLogGroup.s, sFilename.s, nLineNo, bMutexAlreadyLocked=#False, bIncludeDebugLine=#False)
Declare debugMsgProcAll2(sProcName.s, sMessage.s, nResult.l, sThreadNo.s, sLogGroup.s, sFilename.s, nLineNo, bMutexAlreadyLocked=#False)
Declare writeSMSLogProc(pProcName.s, sCommandString.s, *prSMS.tySMS)
Declare logKeyEventProc(pProcName.s, pMessage.s, sLogGroup.s, sFilename.s, nLineNo)
Declare debugAnyFile(sAnyFile.s, bIgnoreBlankLines=#False)
Declare debugCueFile(sCueFile.s)
Declare debugDevMapFile(sDevMapFile.s)
Declare debugPrefsFile(sPrefsFile.s)
Declare.s GetVendor()
Declare openListLogFile()
Declare logListEventProc(sProcName.s, sMessage.s, sThreadNo.s, bHoldLineIfNotOpen)
Declare purgeOldLogFiles()
Declare openLogFile()
Declare closeLogFile(bCompressLogFile=#True)
Declare newHandleProc(nHandleType, nHandle, pProcName.s, bTrace=#False, sExtraInfo.s="")
Declare freeHandleProc(nHandle, pProcName.s)
Declare setDefaultTracing()
Declare.f CalculateCPUUsage(prevIdle.q, prevKernel.q, prevUser.q, currIdle.q, currKernel.q, currUser.q)
Declare.q FileTimeToQuad(*ft.FILETIME)
