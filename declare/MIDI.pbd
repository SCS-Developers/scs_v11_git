Declare openWinmm()
Declare closeWinmm()
Declare checkGoConfirmReqdAndSet()
Declare closeMidiPorts()
Declare closeAndReopenMidiOutPort(nMidiOutPhysicalDevPtr)
Declare getMidiInPhysicalDevPtr(sName.s, bDummy)
Declare getMidiOutPhysicalDevPtr(sName.s, bDummy)
Declare.s getMidiCueFromSCSCue(psCue.s, psMethod.s)
Declare getMidiCuePtr(sMidiCue.s)
Declare.s getMidiInfo()
Declare.s midiCCAbbrForCmd(nCmd, nCmdNo)
Declare.s midiCCDescrForCmd(nCmd)
Declare.s midiVVAbbrForCmd(nCmd)
Declare.s midiVVDescrForCmd(nCmd)
Declare.s midiCmdDescrForCmdNo(nCmdNo, nCueSet=0, sMidiCue.s="", nCtrlMethod=0, nCmd=0, nCC=-1, nVV=-1)
Declare loadArrayMidiDevs()
Declare initMidiControl()
Declare MidiIn_Port(sOpenClose.s, nPhysicalDevPtr, sReason.s, bForceClose=#False)
Declare MidiConnect_Port(sOpenClose.s, nPhysicalDevPtr)
Declare MidiCallback_Proc(hmIN.l, wMsg.l, dwInstance.l, dw1.l, dw2.l)
Declare MidiIn_Proc(hmIN.l, wMsg.l, dwInstance.l, dw1.l, dw2.l)
Declare.s decodeMidiMsg(wMsg.l)
Declare MidiCapture_Proc(hmIN.l, wMsg.l, dwInstance.l, dw1.l, dw2.l)
Declare.s decodeCommandFormatL(nCommandFormat.b) ; nb if you change .b then change #PB_Byte in the Hex() command
Declare displayMidiWarning(sMsg.s)
Declare.s formatMidiText(sPort.s, txt.s, txt2.s)
Declare doMidiIn_Proc()
Declare setActionAndCue(nPhysicalDevPtr, pMsgType, pKK, pVV, *nMidiCuePtr)
Declare.s setMidiCueForCueRelated(pMidiInPort, pMsgType, pKK, pVV)
Declare MidiOut_Port(sOpenClose.s, nMidiOutPhysicalDevPtr, sReason.s)
Declare MidiThru_Port(sConnectDisconnect.s, nMidiInPhysicalDevPtr, nMidiOutPhysicalDevPtr)
Declare openMidiPorts()
Declare openMidiOutPortIfReqd(nMidiOutPhysicalDevPtr)
Declare openMTCCuesPortIfReqd(nMTCCuesPhysicalDevPtr)
Declare openMTCCuesPortAndWaitIfReqd(bCloseExistingPort=#False)
Declare closeMTCCuesPort(nMTCCuesPhysicalDevPtr)
Declare getCuePtrForMidiCue(sMidiCue.s, bCueEnabledOnly=#True)
Declare getCuePtrForExtFaderCC(nExtFaderCC)
Declare processMidiOrDMXPlayCueCmd(nPhysicalDevPtr, sMidiCue.s)
Declare processMidiFadeOutCueCmd(sMidiCue.s)
Declare processMidiGoButtonCmd(nMidiInPort)
Declare processMidiGoToCueCmd(sMidiCue.s)
Declare processMidiNextCueCmd()
Declare processMidiPrevCueCmd()
Declare processMidiPauseResumeCueCmd(sMidiCue.s)
Declare processMidiLoadCueCmd(sMidiCue.s)
Declare processMidiUnloadCueCmd(sMidiCue.s)
Declare processMidiReleaseCueCmd(sMidiCue.s)
Declare processMidiStopCueCmd(sMidiCue.s)
Declare processOpenFavFile(nFavFileNr)
Declare.s SendMSC(nMidiOutPort, pDevice, pCommandFormat, pCommand, pQNumber.s, pQList.s, pQPath.s, pMacro)
Declare.s SendProgChange(nMidiOutPort, pProg, pMidiChannel)
Declare.s SendCtrlChange(nMidiOutPort, pCtrl, pValue, pMidiChannel, bLogCommand=#True)
Declare.s SendNoteOn(nMidiOutPort, pNote, pVelocity, pMidiChannel)
Declare.s SendNoteOff(nMidiOutPort, pNote, pVelocity, pMidiChannel)
Declare.s SendMidiFreeFormat(nMidiOutPort, pHexMsg.s)
Declare.s SendMidiNRPN(nMidiOutPort, *rCtrlSend.tyCtrlSend)
Declare.s SendMidiRemDevMsg(nMidiOutPort, *rCtrlSend.tyCtrlSend)
Declare ShowMMErr(pProcName.s, InFunct.s, MMErr.l)
Declare TraceMMErr(pProcName.s, InFunct.s, MMErr.l)
Declare loadMidiControl(bEditor)
Declare getFirstMidiDevice(bInputDevice)
Declare getNextMidiDevice(bInputDevice, nCurrDevPtr)
Declare getLastMidiDevice(bInputDevice)
Declare.s decodeMTCSendState(nMTCSendState)
Declare initQPCIfReqd()
Declare checkIfMTCCuesIncluded()
Declare initMTCSendControlForSub(pSubPtr)
Declare.s SendMTCFullFrame()
Declare.s SendMTCFullFrameForRepos(bMutexAlreadyLocked, bRestarting, bCurrentlyPaused=#False)
Declare setMTCAtAudStartIfReqd(pAudPtr)
Declare sliderValueToMidiValue(nCtrlType, nSliderValue)
Declare midiValueToSliderValue(nCtrlType, nMidiValue)
Declare sendControllerMsg(nCtrlType, nCtrlSubType, nCtrlNo, nValue)
Declare resetController()
Declare resetControllerSelectButtons(nExcludeCtrlNo)
Declare processMidiControllerMsg()
Declare.s decodeControllerLogEntry(nLogEntry)
Declare setFaderAssignments()
Declare changeActionIfReqd(nAction, sMidiCue.s)
Declare loadArrayCueOrSubForMTC()
Declare clearArrayCueOrSubForMTC()
Declare checkArrayCueOrSubForMTC()
Declare checkMidiChannelAndMsgTypeReqd(nMidiChannel, nMsgType, kk, vv)
Declare getMidiFileLength(sFileName.s)
Declare unpackNRPN(*rCtrlSend.tyCtrlSend, bCheckOnly=#True)
Declare convertMidiFreesToNRPNIfRequired()
Declare convertMidiCCToNRPNIfRequired()
Declare.s buildNRPNSendString(*rCtrlSend.tyCtrlSend)
Declare.s buildNRPNDisplayInfo(*rCtrlSend.tyCtrlSend)
Declare stopMTC()
Declare encodeCtrlMidiRemoteDev(sCtrlMidiRemoteDev.s)
Declare.s decodeCtrlMidiRemoteDev(nCtrlMidiRemoteDev)
Declare.s decodeCtrlMidiRemoteDevL(nCtrlMidiRemoteDev)
Declare.l getMidiInDeviceIdForMidiOutDeviceId(nMidiOutDeviceId.l)
Declare calcMSParamValueForCallableCueParam(*rCue.tyCue, sStringParam.s, nNumParam)
Declare setBooleanUseExternalController(*rCtrlSetup.tyCtrlSetup)
