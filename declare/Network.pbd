Declare.s decodeNetworkRole(nNetworkRole)
Declare encodeNetworkRole(sNetworkRole.s)
Declare.s decodeNetworkMsgAction(nMsgAction)
Declare.s decodeNetworkMsgActionL(nMsgAction)
Declare encodeNetworkMsgAction(sMsgAction.s)
Declare.s decodeNetworkMsgFormat(nNetworkMsgFormat)
Declare encodeNetworkMsgFormat(sNetworkMsgFormat.s)
Declare.s decodeCtrlNetworkRemoteDev(nCtrlNetworkRemoteDev)
Declare.s decodeCtrlNetworkRemoteDevL(nCtrlNetworkRemoteDev)
Declare.s decodeCtrlNetworkRemoteDevLShort(nCtrlNetworkRemoteDev)
Declare encodeCtrlNetworkRemoteDev(sCtrlNetworkRemoteDev.s)
Declare.s decodeCueNetworkRemoteDev(nCueNetworkRemoteDev)
Declare.s decodeCueNetworkRemoteDevL(nCueNetworkRemoteDev)
Declare encodeCueNetworkRemoteDev(sCueNetworkRemoteDev.s)
Declare.s decodeNetworkProtocol(nNetworkProtocol)
Declare encodeNetworkProtocol(sNetworkProtocol.s)
Declare buildNetworkDevDesc(*pNetworkControl.tyNetworkControl)
Declare.s makeNetworkDevDesc(pDevGrp, pDevNo)
Declare getOSCItemNumber(nNetworkControlPtr, nOSCCmdType, sOSCItemString.s, bOSCItemPlaceHolder)
Declare.s getOSCItemString(nNetworkControlPtr, nOSCCmdType, nOSCItemNr)
Declare.s buildNetworkSendString(pSubPtr, nCtrlSendIndex, bPrimaryFile=#True)
Declare listNetworkControl()
Declare checkNetworkDevsForCtrlSends()
Declare processNetworkGoButtonCommand()
Declare processGoRemote(pCuePtr)
Declare processNetworkGoCommand(sNetworkCue.s, sExpectedCue.s="")
Declare processNetworkGoToTopCommand()
Declare processNetworkGoToNextCommand()
Declare processNetworkGoBackCommand()
Declare processNetworkGoToEndCommand()
Declare processNetworkGoToCueCommand(sNetworkCue.s)
Declare processNetworkFireNextCommand()
Declare processNetworkStopCommand(sNetworkCue.s)
Declare processNetworkStopAllCommand()
Declare processNetworkFadeAllCommand()
Declare processNetworkPauseResumeAllCommand()
Declare processNetworkStopMTCCommand()
Declare processNetworkPauseCueCommand(sNetworkCue.s)
Declare processNetworkResumeCueCommand(sNetworkCue.s)
Declare processNetworkPauseResumeCommand(sNetworkCue.s)
Declare processNetworkPollRequest()
Declare doNetworkIn_Proc()
Declare processNetworkInput_NonOSC(InBuff.s, nNetworkControlPtr=-1)
Declare processNetworkReceiveBuffer(nNetworkControlPtr, nCueNetworkRemoteDev, bHideTracing=#False)
Declare processNetworkInput_X32(nNetworkControlPtr)
Declare processOSCStatusRequest(nNetworkControlPtr, bHideTracing=#False)
Declare sendOSCStatus(bHideTracing=#False)
Declare processOSCBeatRequest(nNetworkControlPtr, bHideTracing=#False)
Declare.s getCueLabelForRAICueNumber(nNumber)
Declare processOSCInfoRequest(nNetworkControlPtr, nCmd, nNumber, sPath.s)
Declare processOSCProdRequest(nNetworkControlPtr, nCmd)
Declare processOSCCueRequest(nNetworkControlPtr, nCmd, sCue.s, nNumber=0, bHideTracing=#False)
Declare processOSCCueGetItems(nNetworkControlPtr, nCmd, nCue, sCue.s, sItemCodes.s, bHideTracing=#False)
Declare processOSCConfigName(nNetworkControlPtr, sPath.s, sConfigName.s)
Declare sendErrToRemoteApp(nNetworkControlPtr, bHideTracing=#False)
Declare processOSCFaderRequest(nNetworkControlPtr, nCmd, fFloat.f=0, nPercentage=0, sLogicalDev.s="")
Declare processNetworkInput_OSC(nNetworkControlPtr, bHideTracing=#False)
Declare.s getNetworkInfo()
Declare getNetworkControlPtrForNetworkDevDesc(nDevType, sNetworkDevDesc.s, bDummy)
Declare getNetworkControlPtrForDevNo(nDevType, nDevNo)
Declare getNetworkControlPtrForServerConnection(nServerConnection)
Declare getNetworkControlPtrForClientConnection(nClientConnection, bDummy)
Declare getNetworkControlPtrForServerAndClientConnection(nServerConnection, nClientConnection, bFMEvent=#False)
Declare loadOSCCtrlSendItemsForDevCode(sDevCode.s)
Declare initNetworkControl()
Declare initNetworkDevice(nNetworkControlPtr, nDevType, bInDevChgs=#False, nDevForDevCheckerIndex=-1)
Declare.s sendNetworkMessage(nNetworkControlPtr, pMsg.s, bIgnoreReadyState=#False, nStringFormat=#PB_Ascii)
Declare sendWaitingNetworkMsgs(nNetworkControlPtr, bFirstWaitingMsgSent=#False)
Declare startNetwork(nNetworkControlPtr=-1, bInDevChgs=#False, nDevForDevCheckerIndex=-1)
Declare closeNetwork(bIncludeRAI=#True, bIncludeFM=#True)
Declare getBlankNetworkControlEntry()
Declare setUseNetworkControlPtrs()
Declare loadNetworkControl(bUseDevChgs)
Declare processNetworkConnection()
Declare processNetworkDisconnection()
Declare extractSLIPDatagram(pStartBytePos)
Declare processNetworkData()
Declare processNetworkServerEvent()
Declare closeANetworkConnection(nNetworkControlPtr, bTrace=#True)
Declare processNetworkClientEvent(nNetworkControlPtr, bTraceOn=#True)
Declare.s makeComparisonMsg(sReceiveMsg.s)
Declare buildOSCMessage(*mBuffer, sAddress.s, sTypeTag.s="", fVal.f=0.0, lVal.l=0, sString.s="")
Declare buildOSCMessageNew(nNetworkControlPtr, nStringFormat, bHideTracing=#False)
Declare buildOSCComplexMessage(*mBuffer, nOSCVersion, nStringFormat, bHideTracing=#False)
Declare sendOSCMessage(nNetworkControlPtr, sAddress.s, sTypeTag.s="", fVal.f=0.0, lVal.l=0, sVal.s="", bHideTracing=#False)
Declare echoReceivedData(nNetworkControlPtr, bHideTracing=#False)
Declare sendOSCComplexMessage(nNetworkControlPtr, bHideTracing=#False)
Declare.s sendOSCCtrlMessage(pSubPtr, nCtrlSendIndex)
Declare.w xchEndianW(e.w)
Declare xchEndianL(e.l)
Declare next4BytePos(n)
Declare unpackOSCMsg(nNetworkControlPtr, bSupportOSCTextMsgs, bHideTracing=#False, nStartPos=0, nEndPos=-1)
Declare getOSCResponse(nNetworkControlPtr, bHideTracing=#False, sExpectedPathOfResponse.s="")
Declare getMaxX32ItemIndex(nNetworkControlPtr, nOSCCmdType)
Declare.s makeX32ItemId(nOSCCmdType, nItemNumber)
Declare.s makeX32ItemInfo(nOSCCmdType, nItemNumber, sItemText.s)
Declare getX32ChannelNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32AuxInNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32FXReturnNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32BusNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32MatrixNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32DCAGroupNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32MainNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32CueNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32MuteGroups(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32SceneNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32SnippetNames(nNetworkControlPtr, bGetRemDevScribbleStripNames, bTraceNames)
Declare getX32Names(nNetworkControlPtr, bIncludeCueNamesEtc=#True)
Declare checkAllX32NamesReceived(nNetworkControlPtr)
Declare getX32ItemNumberForItemName(nNetworkControlPtr, nOSCCmdType, sOSCItemName.s)
Declare.s getX32ItemNameForItemNumber(nNetworkControlPtr, nOSCCmdType, nOSCItemNumber)
Declare loadAnyMissingOSCItemInfo(nNetworkControlPtr, pCuePtr=-1, bFirstCall=#False)
Declare getX32ItemOnStates(nNetworkControlPtr, nOSCCmdType, bSuspendNetworkThread)
Declare getX32Data(nNetworkControlPtr)
Declare setX32CueControl()
Declare setDerivedNetworkFields(pNetworkControlPtr=-1)
Declare.s decodeOSCCmdType(nOSCCmdType)
Declare.s decodeOSCCmdTypeL(nOSCCmdType)
Declare encodeOSCCmdType(sOSCCmdType.s)
Declare.s getLabelForOSCCmdType(nOSCCmdType)
Declare.s buildOSCDisplayInfo(*rSub.tySub, nCtrlSendIndex)
Declare updateNetworkControlForDevChgsDev(nDevMapDevPtr, nDevNo)
Declare openNetworkPortIfReqd(nNetworkControlPtr, bInDevChgs=#False, nDevForDevCheckerIndex=-1, bTrace=#True)
Declare.s X32CmdDescrForCmdNo(nCmdNo)
Declare unpackOSCEnteredString(sEnteredString.s)
Declare.s getCompIPAddresses()
Declare displayCompIPAddresses()
Declare showMoreInfoForCompIPAddresses()
Declare RAI_Init()
Declare RAI_IsClientActive()
Declare RAI_Terminate()
Declare getRAICueState(pCuePtr)
Declare getCueStartedInEditor(pCuePtr)
Declare sendRAICueStateIfReqd(pCuePtr, bHideTracing=#False)
Declare sendRAICueSetPosIfReqd(pAudPtr, bUsePort3=#False, bHideTracing=#False)
Declare checkForAndSendSetPosMsgs()
Declare sendRAIGlobalCommand(sCommand.s, bHideTracing=#False)
Declare sendRAIProdTimerCommand(sCommand.s, bHideTracing=#False)
Declare sendRAICurrCueAndNextCue(bHideTracing=#False)
Declare.s decodeRAIClient(nClientConnection)
Declare.s decodeRAIApp(nRAIApp)
Declare encodeRAIApp(sRAIApp.s)
Declare FM_init(bForceClose)
Declare FMP_BackupConnectionRequest()
Declare FMP_sendCueFileName(nFMBackupIndex)
Declare FMP_sendCommandIfReqd(nOSCINP_Command, nCuePtr=0, nParam2=0, nParam3=0, sParam4.s="", bHideTracing=#False)
Declare FMP_BackupDisconnectionRequest()
Declare FMB_ServerConnectionRequest()
Declare FMB_openCueFile(sFilename.s, sCue.s)
Declare FMB_setPlayOrder(nNetworkControlPtr)
Declare encodeFunctionalMode(sFunctionalMode.s)
Declare.s decodeFunctionalMode(nFunctionalMode)
Declare.s decodeFunctionalModeL(nFunctionalMode)
Declare splitNetworkMsg(sNetworkMsg.s)
Declare looksLikeIPAddress(sValue.s)
Declare validateIPAddressFormat(pField.s, pPrompt.s, bDisplayError=#True)
Declare validateIPPortNumber(pField.s, pPrompt.s)
Declare makeIPAddressFromString(sIPAddress.s)
Declare SendNetworkStringAscii(nConnection, sString.s, bTrace=#False, nStringFormat=#PB_Ascii)
Declare.s sendNetworkDataMessage(nNetworkControlPtr, pSubPtr, nCtrlSendIndex, bIgnoreReadyState=#False)
Declare openNetworkConnectionIfReqd(*rCtrlSend.tyCtrlSend, bTrace=#True)
Declare populateOSCMessageDataIfReqd(nNetworkControlPtr)
Declare getNetworkControlPtrForRAI(bIgnoreClientActiveState=#False)
Declare formatAndSendNetworkData(nClientID, *mBuffer, nSize, nNetworkControlPtr)
