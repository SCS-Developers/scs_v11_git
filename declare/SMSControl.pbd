Declare setSMSDefaults(bSetSMSCheck=#False)
Declare.i getUTCDate()
Declare.l lrotl(pSource.l, pShift)
Declare.s makeSCSKeyForSMS()
Declare getSMSInputsOutputsPlaybacks()
Declare initSMS()
Declare writeSMSLog(pProcName.s, sCommandString.s)
Declare writeSMSLogLine(pProcName.s, sLogLine.s)
Declare writeSMSCheckLog(pProcName.s, sCommandString.s)
Declare openSMSConnection()
Declare openSMSCheckConnection(sServerName.s, nPortNo, bKeepConnectionOpen=#False)
Declare closeSMSConnection()
Declare closeSMSCheckConnection()
Declare handleSMSInput()
Declare getSMSResponse(bConnectionResponse=#False, sAssociatedCommandString.s="")
Declare sendSMSCommandProc(sCommandString.s, bLogCommand=#True, pProcName.s="", nLabel=0)
Declare clearPlaybacks()
Declare.s getSMSResponseField(nLineNo, nFieldNo) ; nLineNo and nFieldNo are both base 1
Declare getSMSDongleState()
Declare convertAudioFileToWAV(sInputFile.s, sOutputFile.s)
Declare unassignPlaybackChannel(nChannel)
Declare freeFilePlaybacks(nPrimaryChan)
Declare freePreviewPlaybacks()
Declare setTrackTimesCommandStrings(pAudPtr, bIncludeStartTime, nLoopInfoIndex)
Declare assignFileTracksToPlaybacks(pAudPtr, sFileName.s, nTrackCount, nAssignTo)
Declare.s buildXChanListForInputDev(pAudPtr, nInputDevNo, nOutputDevNo)
Declare.s buildPXChanList(nPrimaryPlaybackChan, nLogicalDevPtr, sTracks.s)
Declare.s buildXChanListForCue(pCuePtr)
Declare.s buildXChanListForSub(pSubPtr)
Declare.s silenceDuplicatePXChans(sPXChanList.s, bFirstDev)
Declare resetSMS()
Declare.s makeSMSTimeString(nTime)
Declare.s makeSMSGainString(fGain.f)
Declare.s makeSMSGainDBString(fGain.f)
Declare.s makeSMSGainMIDIString(fGain.f)
Declare.s makeSMSFadeType(nFadeType)
Declare buildGetSMSCurrInfoCommandStrings()
Declare waitForSMSInput(nMaxWaitTime=100)
Declare getSMSCurrInfo(bGetVUReadings)
Declare getAndWaitForTrackTime(pAudPtr)
Declare.s extractCurrInfo(sBuff.s)
Declare.s getSMSTrackStatus(sPChan.s)
Declare.s getSMSTrackRepeatTime(sPChan.s)
Declare.s getSMSTrackStartTime(sPChan.s)
Declare getSMSTrackTimeInMS(sPPrimaryChan.s)
Declare calcRelFilePostions(sTrackTimeResponse.s)
Declare.f getSMSGain(sPXChan.s)
Declare.s getSMSGainString(sPXChan.s)
Declare freeOnePlaybackChanList(sPChanList.s, bIssueStopCommand)
Declare.s extractSMSChanItem(sResponse.s, sChan.s)
Declare.s getPlayableFile(sFileName.s, bOKForSMS, bPreviewing = #False)
Declare saveXMLEncFilesIndex()
Declare scanXMLEncFilesIndex(*CurrentNode, CurrentSublevel)
Declare readXMLEncFilesIndex()
Declare compareFiles(sFileName1.s, sFileName2.s)
Declare openFileForSMS(pAudPtr)
Declare setGainCommandStringsForInputs(pAudPtr)
Declare setGainCommandStringForSoloLiveInput(nCtrlIndex)
Declare openInputsForSMS(pAudPtr)
Declare.s setLevelsForSMSOutputDev(pAudPtr, nOutputDevNo, fBVLevel.f, fPan.f, nFadeTime=0, nFadeType=#SCS_FADE_STD, nInputDevNo=-1)
Declare setLevelsForSMSInputDev(pAudPtr, nInputDev, nReqdFadeTime=0)
Declare setSyncPChanListForAud(pAudPtr)
Declare setSyncPChanListForCue(pCuePtr)
Declare setSMSSyncPointLoopReleased(pAudPtr, nLoopInfoIndex, bLoopReleased)
Declare setSMSSyncPoint(pAudPtr, pSyncType, pSyncPos, pSyncProcedure.s, nLoopSyncIndex=-1, nLoopInfoIndex=-1)
Declare removeSMSSyncPoint(pAudPtr, pSyncIndex)
Declare checkSMSSyncPoints()
Declare.s decodePLBAssignedTo(nAssignedTo)
Declare getLoopInfoIndexForSMSSyncPoint(pAudPtr, nSMSSyncPoint)
Declare setSMSLoopEnd(pAudPtr)
Declare setSMSLoopStart(pAudPtr)
Declare LoopSyncProcSMSXFade(pAudPtr, nLoopSyncIndex)
Declare LoopSyncProcSMSLE(pAudPtr, nLoopSyncIndex)
Declare LoopSyncProcSMSNOXFade(pAudPtr, nLoopSyncIndex)
Declare createASIOGroup()
Declare deleteASIOGroup()
Declare initInterface()
Declare clearPChanResponses(nPChan)
Declare clearAllResponses()
Declare buildVUCommandString()
Declare buildSMSOutputArray()
Declare listSMSSyncPoints()
Declare listPlaybackArray()
Declare setFastCuePlayCommandString(pCuePtr)
Declare.i primeAndInitSMS(bConnectionOptional=#False)
Declare.s splitDuplicatePXChans(pAudPtr, sPXChanList.s, bFirstDev, bAltChannel)
Declare activateAudInputs(pAudPtr, sCallingProcName)
Declare deactivateAudInputs(pAudPtr, sCallingProcName.s)
Declare adjustLiveEQ(*rDev.tyDevMapDev, bSetOnOff=#False)
Declare setAllLiveEQ()
Declare adjust0BasedOutputChanIfReqd(p0BasedOutputChan, pAudioDriver=-1)
Declare setDevTypeVariablesForSMS(*rDev.tyDevMapDev)
Declare checkUsingPlaybackRateChangeOnly(bEditingASubCue=#False)
Declare unlockTimeCode(pCuePtr, bDisplayWarning=#True)
