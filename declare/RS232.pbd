Declare.s buildSendString(pSubPtr, nCtrlSendIndex, bPrimaryFile=#True)
Declare checkRS232DevsForCtrlSends(bUseDevChgs=#False)
Declare.s getCtrlSendDevDescForLogicalDev(sCtrlSendLogicalDev.s, *bDummyDev)
Declare getRS232ControlIndexForLogicalDev(sCtrlSendLogicalDev.s)
Declare getRS232ControlIndexForRS232PortAddress(sRS232PortAddress.s, bDummy)
Declare handleRS232Input(InBuff.s, nIndex)
Declare.s getRS232Info()
Declare initRS232Control()
Declare.s sendRS232String(pCtrlSendLogicalDev.s, pMsg.s)
Declare.s sendRS232Data(pCtrlSendLogicalDev.s, *pBuffer, pLength)
Declare initRS232Device(nRS232DevNo, nDevType)
Declare startRS232()
Declare closeRS232()
Declare.s decodeEntryMode(nEntryMode)
Declare encodeEntryMode(sEntryMode.s)
Declare.s decodeParity(nRS232Parity)
Declare encodeParity(sParity.s)
Declare.s decodeHandshaking(nRS232Handshaking)
Declare encodeHandshaking(sHandshaking.s)
Declare doRS232In_Proc()
Declare processRS232GoCommand(sRS232Cue.s)
Declare processRS232GoTopCommand()
Declare processRS232StopCommand(sRS232Cue.s)
Declare processRS232StopAllCommand()
Declare runRS232ReceiveThread(*nThreadValue)          ;serial input thread
Declare openSerialPortIfReqd(nRS232DevNo)
Declare setRS232InOutInds(bUseDevChgs=#False)
Declare listRS232Controls()
