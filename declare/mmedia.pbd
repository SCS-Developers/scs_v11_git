Declare addOutput(nOutputArrayIndex, sDesc.s, sSpeaker.s, nSpeakersFlag, nChans = 1, bIgnoreSpkrArrangement = #False, nFirstASIOChannel.l = 0)
Declare buildOutputArray()
Declare.f calcBVLevel(pType, nTime, nPos, fOriginalBVLevel.f, fTargetBVLevel.f, fTrimFactor.f)
Declare.f calcPLLevel(pAudPtr, pDevice)
Declare.f calcPan(nTime, nPos, fOriginalPan.f, fTargetPan.f)
Declare mapAudLogicalDevsToPhysicalDevs(nAudioDriver)
Declare mapAudLogicalDevsToPhysicalDevsForBASS(nAudioDriver)
Declare mapAudLogicalDevsToPhysicalDevsForSMS(nAudioDriver)
Declare mapVidAudLogicalDevsToPhysicalDevs()
Declare mapVidCapLogicalDevsToPhysicalDevs()
Declare checkAudTimes(pAudPtr)
Declare checkDevicesStillAvailable()
Declare clearProdLogicalDevs()
Declare closeAllMciDevices()
Declare closeDevices(nAudioDriver)
Declare closeAllDevices(bIncludeRAI=#True, bIncludeFM=#True)
Declare closeAud(pAudPtr, bUnloadingCue=#False, bCompleteCue=#False)
Declare closeCue(pCuePtr, bUnloadingCue=#False, bCompleteCue=#False)
Declare closeMidiFile(pAudPtr)
Declare closeSub(pSubPtr, bUnloadingCue=#False, bCompleteCue=#False, bTypeUStopsMTC=#True)
Declare stopTestTone()
Declare getChannelAttributes(pAudPtr)
Declare getFileDetail(pAudPtr)
Declare loadArrayAudioDevs()
Declare devIndexForLogicalDev(nDevType, sLogicalDev.s)
Declare getBassDeviceForLogicalDev(sAudioLogicalDev.s)
Declare getMixerStreamPtrForLogicalDev(sLogicalDev.s)
Declare getProdLogicalDevPtrForLogicalDev(sLogicalDev.s, nDevGrp=#SCS_DEVGRP_AUDIO_OUTPUT)
Declare openFileForBASS(pAudPtr, pDevNo)
Declare openMidiFile(pAudPtr)
Declare openInputChannels(pAudPtr)
Declare getFileDuration(pAudPtr)
Declare addChannelToChannelUpdateArray(nBassChannel.l, nUpdateLength.l)
Declare doChannelUpdates()
Declare openMediaFile(pAudPtr, bForceDurationCheck=#False, nVidPicTarget=#SCS_VID_PIC_TARGET_NONE, bClearExistingSecondary=#False, bInsufficientSMSPlaybacksOK=#False, bMayClearSettings=#False)
Declare pauseAllEarlierCues(pCuePtr, nSFRCueType=#SCS_SFR_CUE_ALL_ANY, nExcludeCuePtr=-99, bExcludeSFRCueList=#False, bHibernate=#False)
Declare pauseAud(pAudPtr, bHibernate = #False)
Declare pauseAudChannels(pAudPtr)
Declare pauseCue(pCuePtr, bHibernate=#False)
Declare resumeCue(pCuePtr)
Declare PauseOrResumeCue(pCuePtr)
Declare pauseMidiFile(pAudPtr)
Declare pauseSub(pSubPtr, bHibernate=#False)
Declare resumeSub(pSubPtr)
Declare playMidiCue(sMidiCue.s)
Declare playCue(pCuePtr, bConfirm=#False, nHotkeyToggleState=-1, bRecursiveCall=#False)
Declare playCueViaCas(pCuePtr, nCasGroupId=-1, bConfirm=#False)
Declare playOrResumeCue(pCuePtr)
Declare playCueFromStart(pCuePtr)
Declare.s getMidiMode(pAudPtr)
Declare playMidiFile(pAudPtr, bUseCas=#False, nCasGroupId=-1, nCtrlSendIndex=-1)
Declare playSubTypeA(pSubPtr, bCalledFromEditor, bUseCas, nCasGroupId, nStartAtTrkNo)
Declare playSubTypeE(pSubPtr, bCalledFromEditor)
Declare playSubTypeF(pSubPtr, bCalledFromEditor, bUseCas, nCasGroupId)
Declare playSubTypeG(pSubPtr, bCalledFromEditor)
Declare playSubTypeI(pSubPtr, bCalledFromEditor)
Declare playSubTypeJ(pSubPtr, bCalledFromEditor)
Declare playSubTypeK(pSubPtr, bCalledFromEditor, bUsePreHotkeyValues=#False, bCalculatingDMXStartValuesOnly=#False)
Declare playExtFaderSubTypeK(pSubPtr, nDMXPercentage)
Declare primeSubLTCurrChanValueArray(pSubPtr, bLoadCurrentValues)
Declare resetHotkeyDMXValues(pSubPtr)
Declare blackOutSubTypeK(pSubPtr)
Declare playSubTypeL(pSubPtr, bCalledFromEditor)
Declare processCtrlSendThreadItem(pCtrlSendThreadItemIndex)
Declare playSubTypeM(pSubPtr, bCalledFromEditor, pCtrlSendIndex, bMayBypassSendingForM2T=#False)
Declare playSubTypeN(pSubPtr, bCalledFromEditor)
Declare playSubTypeP(pSubPtr, bCalledFromEditor, bUseCas, nCasGroupId, nStartAtTrkNo)
Declare playSubTypeQ(pSubPtr, bCalledFromEditor)
Declare playSubTypeR(pSubPtr, bCalledFromEditor)
Declare playSubTypeS(pSubPtr, bCalledFromEditor, bUseCas, nCasGroupId, nHotkeyToggleState=-1)
Declare reposCue(pCuePtr, nSetPosTime, bRelativeTime=#False, bBeforeEnd=#False, nSetPosCueType=#SCS_SETPOS_CUETYPE_NA)
Declare playSubTypeT(pSubPtr, bCalledFromEditor)
Declare playSubTypeU(pSubPtr, bCalledFromEditor, bBypassSendingForM2T=#False)
Declare playDisabledSub(pSubPtr, bCalledFromEditor)
Declare playSub(pSubPtr, pLCStartAt=0, bUseCas=#False, bCalledFromEditor=#False, nCtrlSendIndex=-1, nCasGroupId=-1, nStartAtTrkNo=-1, bTopLevelCall=#False, nHotkeyToggleState=-1)
Declare playSubsInMainThread()
Declare playPreview(sFileName.s)
Declare stopPreview()
Declare redoPhysicalDevs()
Declare changeVideoDriverSettings()
Declare releaseAllEarlierCues(pCuePtr, bStopImmediately, pSubSubType.s, bJustStop, bStopNotLoadedCues, nSFRCueType=#SCS_SFR_CUE_ALL_ANY, nExcludeCuePtr=-1, bExcludeSFRCueList=#False)
Declare removeAudChannelLoopSyncs(pAudPtr, bSwapped=#False, nLoopInfoIndex=-1)
Declare removeAChannelSync(pAudPtr, nChannel.l, nSync.l, bLogErrors=#True)
Declare removeAudChannelPlayEndSyncs(pAudPtr)
Declare removeAudChannelMarkerSyncs(pAudPtr)
Declare removeLinksOneAud(pAudPtr)
Declare reposAuds(pPrimaryAudPtr, pAbsReposAt, bManualChange=#False, bResyncOtherCues=#False, nVidPicTarget=#SCS_VID_PIC_TARGET_NONE, bTrace=#False)
Declare adjustMasterFader(nDirection)
Declare muteMasterFader()
Declare resetMasterFader()
Declare restartAud(pAudPtr, bCalledFromEditLvlChg=#False)
Declare resumeAud(pAudPtr, bFadeIn=#False)
Declare resumeMidiFile(pAudPtr)
Declare rewindAud(pAudPtr)
Declare rewindMidiFile(pAudPtr)
Declare rewindVideo(pAudPtr, pVidPicTarget)
Declare setLevelsAny(pAudPtr, nOutputDev, fReqdBVLevel.f, fReqdPan.f, nInputDev=-1, nReqdFadeTime=0)
Declare setLevelsBASS(pAudPtr, nDev, fBVLevel.f, fPan.f)
Declare setLinksOneAud(pAudPtr)
Declare setLinksForAudsWhereRequested()
Declare setLogicalDevsDerivedFields()
Declare setDevChgsDerivedFieldsForLogicalDevs()
Declare.f calcReqdGain(*rDev.tyDevMapDev, bMuteOutput=#False, bLogResults=#False)
Declare setAudioDevOutputGain(nDevNo, bInDevChgs=#False, bInitializingDev=#False, bMuteOutput=#False)
Declare setVidAudDevOutputGain(nDevNo, bInDevChgs=#False, bInitializingDev=#False)
Declare setInputGain(nDevNo, bInDevChgs=#False, bInitializingDev=#False)
Declare setMasterFader(fMasterBVLevel.f, bInDevChgs=#False, bInitializingDev=#False)
Declare setAllInputGains(bInDevChgs=#False, bInitializingDev=#False)
Declare setAllOutputGains(bInDevChgs=#False, bInitializingDev=#False)
Declare setMidiFilePosition(pAudPtr, pPosition)
Declare startAsioDevices()
Declare startAsioMixerStreams()
Declare stopAll(bCompleteCues, bJustStop, bIncludeHibernatedCues=#False)
Declare stopAtTrackEndAllEarlierCues(pCuePtr, nSFRCueType=#SCS_SFR_CUE_ALL_ANY, nExcludeCuePtr=-1, bExcludeSFRCueList=#False, bSFRCompleteAssocAutoStartCues=#False)
Declare stopChannelSlides(pAudPtr)
Declare stopCue(pCuePtr, pTypesToStop.s, bOpenNextCues, bUseCas = #False)
Declare stopOneSub(pSubPtr, pTypesToStop.s, bJustStop, bUseCas=#False, bTypeUStopsMTC=#True)
Declare stopSub(pSubPtr, pTypesToStop.s, bOpenNextCues, bJustStop, bUseCas=#False, bTypeUStopsMTC=#True)
Declare stopAllEarlierCues(pCuePtr, bStopImmediately, pSubSubType.s, bJustStop, bStopNotLoadedCues, bUseCas=#False, nSFRCueType=#SCS_SFR_CUE_ALL_ANY, nExcludeCuePtr=-99, nExcludeSubPtr=-99, bExcludeSFRCueList=#False, bSFRCompleteAssocAutoStartCues=#False, bSFRHoldAssocAutoStartCues=#False, bIncludeHibernatedCues=#False)
Declare Error_(pProcName.s, message.s)
Declare ASIO_Error_(pProcName.s, message.s)
Declare Error_2(pProcName.s, pErrorCode, pMessage.s)
Declare fadeInOneAud(pAudPtr)
Declare fadeOutCue(pCuePtr, bOpenNextCues=#False, bStopCountingDownSubs=#False, bHibernate=#False)
Declare fadeOutAllEarlierCues(pCuePtr, bStopImmediately, pSubSubType.s, bJustStop, bStopNotLoadedCues, bUseCas=#False, nSFRCueType=#SCS_SFR_CUE_ALL_ANY, nExcludeCuePtr=-1, nExcludeSubPtr=-99, bExcludeSFRCueList=#False, bSFRCompleteAssocAutoStartCues=#False, bSFRHoldAssocAutoStartCues=#False)
Declare fadeOutOneAud(pAudPtr, nRequestedBySubPtr=-1)
Declare fadeOutOneSub(pSubPtr, bStopCountingDownSubs=#False, nRequestedBySubPtr=-1)
Declare fadeOutSub(pSubPtr, bOpenNextCues, bStopCountingDownSubs=#False, bHibernate=#False, bFadeOutLinked=#False, nRequestedBySubPtr=-1)
Declare playAud(pAudPtr, bUseCas=#False, bStartingOrResumingPlaylist=#False, nCasGroupId=-1, bTopLevelCall=#False, bCheckProgSlider=#True, nCtrlSendIndex=-1)
Declare playAudChannels(pAudPtr, bUseCas=#False, nCasGroupId=-1, bCalledFromEditLvlChg=#False, nCtrlSendIndex=-1)
Declare resumeAudChannels(pAudPtr)
Declare resyncLinkedAuds()
Declare resyncOneLinkedAud(pPrimaryAudPtr)
Declare freeAudStreams(pAudPtr)
Declare freeOneAudStream(pAudPtr, pDev)
Declare setAudChannelPositions(pAudPtr, pAbsPosition, bManualChange=#False, pBytePosition.q=-2, pSamplePos.q=-2, nVidPicTarget=#SCS_VID_PIC_TARGET_NONE, bTrace=#False)
Declare.s getBassErrorDesc(pErrorCode.l, pErrorMsg.s="")
Declare releaseCueLoop(pCuePtr)
Declare releaseSubLoop(pSubPtr)
Declare releaseAudLoop(pAudPtr, nLoopNo=0)
Declare LoopSyncProcStart(Handle.l, channel.l, nData, user)
Declare LoopSyncProcMixTime(Handle.l, channel.l, nData, user)
Declare LoopSyncProcHearBoth(Handle.l, channel.l, nData, user)
Declare LoopSyncProcHearLE(Handle.l, channel.l, nData, user)
Declare LoopSyncProcHearXFade(Handle.l, channel.l, nData, user)
Declare continueXfade(pAudPtr)
Declare setAudioDriverBuffersEtc(nAudioDriver)
Declare initBassForAudioDriver(nAudioDriver)
Declare mmInit()
Declare mmSetDevice(nBassDevice.l, sCalledFrom.s, sCue.s)
Declare mmSetPlaybackBufLength()
Declare mmSetUpdatePeriodLength()
Declare mmTerminate()
Declare PlayEndSyncProc(pHandle.l, pChannel.l, pData, pUser)
Declare MarkerSyncProc(pHandle.l, pChannel.l, pData, pUser)
Declare setChannelPosition(pAudPtr, pDev, nPosition, qBytePosition=-2.0)
Declare setFileStateEtc(pAudPtr)
Declare setFirstAndLastDev(pAudPtr, bPrimaryFile=#True)
Declare setBassLoopStart(pAudPtr)
Declare setBassLoopEnd(pAudPtr)
Declare setBassPlayEnd(pAudPtr)
Declare setBassMarkerPositions(pAudPtr)
Declare slideChannelAttributes(pAudPtr, nDev, fBVLevel.f, fPan.f, nTime, nLabel=0)
Declare initDevice(nPhysicalDevIndex, bDisplayErrors=#True)
Declare initVidAudDevice(nPhysicalDevIndex, bDisplayErrors=#True)
Declare initVidCapDevice(nPhysicalDevIndex, bDisplayErrors=#True)
Declare openNormal(pAudPtr, d, nBassSpeaker, nStreamCreateFlags.l, nDecodeStreamCreateFlags.l)
Declare freeStreamRequest(nBassChannel.l, nBassDevice, nAudPtr=-1, nDevNo=0, bDecodeStream=#False, nMixerStreamPtr=-1, bUsingSplitStream=#False, bFreeSteamNow=#False)
Declare freeGaplessStreams()
Declare freeOneStreamNow()
Declare freeStreams(bFreeNow=#False)
Declare displayMidiError(nErrCode.l, pMciString.s,pWhere.s)
Declare createOneMixerStream(pMixerStreamPtr, pDevMapDevPtr, bIgnoreNotFounds=#False)
Declare createMixerStreams(bIgnoreNotFounds=#False)
Declare assignGaplessSeqEntry()
Declare createGaplessStreamIfReqd(nGaplessSeqPtr, pAudPtr)
Declare populateCboTrim(hCboTrim)
Declare populateCboTracksForAud(hCboTracks, pAudPtr, nDevNo)
Declare populateCboTracksForSub(hCboTracks, pSubPtr, nDevNo)
Declare mergeDuplicateAsioDevs()
Declare setTestToneLevel()
Declare setTestTonePan()
Declare setTimeOverrides(nFadeFieldType, nSFRAction, nTimeOverride, nFromCuePtr, nUptoCuePtr, nSFRCueType, nSubNo=-1, nExcludeCuePtr=-1, bExcludeSFRCueList=#False)
Declare playTestTone(nDevNo, fBVLevel.f, fPan.f)
Declare playStreamProcTestTone(nDevNo, fBVLevel.f, fPan.f)
Declare playStreamProcTestToneToMixerStream(pMixerStreamPtr, pDevNo, fBVLevel.f, fPan.f, pDevMapDevPtr=-1)
Declare streamTestTone(Handle.l, *buffer, length.l, *user)
Declare confirmGo(nConfirmMethod)
Declare setWholeCueState(pCuePtr, pCurrentState, pNewState)
Declare completeOtherWaitingCues(pCuePtr)
Declare completeAud(pAudPtr)
Declare buildAudSetArray()
Declare Stereo2MonoRightDSP(Handle.l, channel.l, *Buffer, nLength.l, *user)
Declare Stereo2MonoLeftDSP(Handle.l, channel.l, *Buffer, nLength.l, *user)
Declare.s decodeStreamCreateFlags(nStreamCreateFlags.l, bMixerStreamCreate=#False, bMixerStreamAddChannel=#False)
Declare.s decodeInitFlags(nInitFlags.l)
Declare.s decodeMixerChannelFlags(nMixerChannelFlags)
Declare loadOutputArrayForDev(nPhysicalDevIndex)
Declare closeOneDevice(pPhysicalDevPtr)
Declare setRelCheckForEnd(pAudPtr)
Declare getOutputArrayIndexForSpeakerDesc(sSpeakerDesc.s)
Declare setEditLogicalDevsDerivedFields()
Declare.s get0BasedFrom1BasedChanString(s1BasedChanString.s)
Declare sortAudioDevs(nAudioDriver)
Declare buildSortedInitializedAudDevsArray()
Declare setIgnoreDevInds(pAudPtr=-1, bUseAllDevs=#False)
Declare listIgnoreDevInds()
Declare openFilesForCueIfReqd(pCuePtr)
Declare reopenAudFileIfReqd(pAudPtr)
Declare reopenVidFilesForCueIfReqd(pCuePtr)
Declare applyAudFade(pAudPtr)
Declare addLevelNodeItem(nNodeType, nNodeTime, nFadeType, nFilePos=-1)
Declare getNextLevelNodeIndex(pAudPtr)
Declare restartASIO_original()
Declare resetAudFlags(pAudPtr)
Declare resetAudStateForPos(pAudPtr, pPos, bTrace=#False)
Declare getCurrLoopInfoIndexAndSetLoopReleasedIndsIfReqd(pAudPtr, nRelPos, bRepositioning=#False, bTrace=#False)
Declare loadCurrLoopInfo(pAudPtr, nRelPos, bRepositioning=#False, bTrace=#False)
Declare setCurrLoopReleasedState(pAudPtr)
Declare usingLoopXFade(pAudPtr)
Declare getLoopInfoIndexForAbsPos(pAudPtr, pAbsPos)
Declare sortLoopInfoArray(pAudPtr)
Declare listLoopInfoArray(pAudPtr)
Declare anyAudPlaying()
Declare resetAndRestartSub(pSubPtr)
Declare DevFailSyncProc(Handle.l, channel.l, nData, user)
Declare countVidCapDevs(*rProd.tyProd)
Declare.l getBassChannelForAud(pAudPtr)
Declare getAudPlayingPos(pAudPtr)
Declare isTempoEtcInUse()
Declare setAudTempoChannelReqd(pAudPtr)
Declare setAudTempoEtcForLvlChgSub(pSubPtr, bIgnoreActionTime=#False)
Declare setSubStateForEndOfSub(pSubPtr, nReqdNonLinearState)
Declare getCurrAudioDriver()
Declare setDeviceInitialTotalVolWorksIfReqd(pAudPtr)
Declare listLinkedDevsForAud(pAudPtr)
Declare.s decodeWasapiNotify(notify.l)
Declare.s decodeWasapiDevType(type.l)
Declare.s decodeDevFlags(nDevFlags.l)
Declare wasapiNotifyProc(notify.l, device.l, *user)
