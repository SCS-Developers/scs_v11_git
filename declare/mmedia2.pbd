Declare.s buildHandleProcName(pProcName.s, nHandle)
Declare setAudChannelAttributes(pAudPtr, nDev, fBVLevel.f, fPan.f)
Declare stopAud(pAudPtr, bKeepOpen=#False, bUseCas=#False, bHideVideo=#True, bForceCallSetCueState=#False)
Declare StopOrFadeOutAudChannels(pAudPtr, bForceStopNotSlide=#False, bCloseVideo=#False, bUseCas=#False, pVidPicTarget=#SCS_VID_PIC_TARGET_NONE, bHideVideo=#True)
Declare stopMidiFile(pAudPtr)
Declare stopLiveInput(pAudPtr, pStopFadeTime=0)
Declare analyzeWavFile(sFileName.s, nBassChannel.l, bTrace=#False)
Declare analyzeMrkFile(sFileName.s, nBassChannel.l, bTrace=#False)
Declare updateAnalyzedFileArray(sFileName.s, nFirstCPIndex=-1, nLastCPIndex=-1)
Declare loadAudCuePoints()
Declare setPLFades(pSubPtr)
Declare setPLLevels(pAudPtr, bSendSMSSetGainCommand=#True, bUseFadeIn=#False, bUseFadeOut=#False)
Declare setPLLevelsIfReqd(pAudPtr)
Declare blendPictures(nPrimaryVidPicTarget, nBlendFactor, bTrace=#False)
Declare getImagePtrForAud(pAudPtr, pVidPicTarget)
Declare storeImageData(pAudPtr, pVidPicTarget, nImageNo)
Declare loadImageIfReqd(pAudPtr, bTrace=#False)
Declare loadPosImageIfReqd(pAudPtr, pPos)
Declare rotateAndFlipImageIfReqd_NEW(pAudPtr, bUsePosLoadImage=#False)
Declare rotateAndFlipImageIfReqd(pAudPtr, bUsePosLoadImage=#False)
Declare createReqdVidPicTargetImages(pAudPtr)
Declare loadAndFitAPicture(pAudPtr, pVidPicTarget)
Declare loadAndFitPictureForAud(pAudPtr, bCalledFromEditor=#False)
Declare closePrevPrimaryAudIfReqd(nPrevPrimaryAudPtr, nThisAudPtr)
Declare closePrevPlayingSubIfReqd(nPrevPlayingSubPtr, nThisSubPtr)
Declare setMonitorCanvasVisible(pVidPicTarget, nMonitorCanvasNo, bVisible)
Declare setVideoCanvasVisible(pVidPicTarget, nVideoCanvasNo, bVisible)
Declare beginFadeAudPictureToPrimary(pAudPtr, pPrimaryVidPicTarget, nBlendTime)
Declare setCurrMonitorCanvasNo(pVidPicTarget)
Declare beginFadeInLogo(pVidPicTarget)
Declare makeVidPicVisible(pVidPicTarget, bMakeImageVisible, pAudPtr)
Declare clearPicture(pVidPicTarget, bUseBlankImage=#False, sTextForBlank.s="", nFrontColor=0, bClearPreview=#False)
Declare displayBlack(pVidPicTarget, bClearPreview=#False)
Declare clearVideoImage(pVidPicTarget)
Declare beginFadeOutPrimary(pAudPtr, pPrimaryVidPicTarget, nBlendTime)
Declare displayPicture(pAudPtr, pVidPicTarget, bIgnoreFadein=#False)
Declare stopInactiveVideoImageSubs(nExcludeSubPtr, nCurrFadeInTime)
Declare closeWhatWasPlayingOnVidPicTarget(pVidPicTarget, pPrevPrimaryAudPtr, pPrevPlayingSubPtr)
Declare fadeOutOrStopWhatWasPlayingOnVidPicTarget(pVidPicTarget)
Declare isVideoPlaying(pVidPicTarget, pAudPtr)
Declare checkIfMovie(nMovieNo, pAudPtr)
Declare checkMovieStopped(nMovieNo, pAudPtr)
Declare checkMoviesToBeCleared()
Declare closePicture(pAudPtr)
Declare setVidPicTargets(bForceSetWindowPositions=#False, bForceSetMonitorPositions=#False)
Declare showImageCentre(pReqdWidth, pReqdHeight)
Declare loadFrame2(pAudPtr, pPos, pUsePosImage=#False)
Declare openVideoFile(pAudPtr, pVidPicTarget)
Declare getVideoInfo(sFileName.s, bForceGet=#False, bTrace=#False)
Declare getVideoInfoForAud(pAudPtr)
Declare.s getPictureInfoForAud(pAudPtr)
Declare getVideoPosition(pAudPtr)
Declare setVideoPosition(pAudPtr, pVidPicTarget, pPosition, bRestartIfStopped=#False, bAssumePlaying=#False, bCheckAudVFLoopProperty=#False)
Declare playVideo(pAudPtr, pVidPicTarget, bUseCas=#False, nCasGroupId=-1, bCheckProgSlider=#False)
Declare pauseVideo(pAudPtr)
Declare resumeVideo(pAudPtr)
Declare stopVideo(pAudPtr, pVidPicTarget, bCloseVideo, bHideVideo=#True)
Declare playAVideo(pAudPtr, pVidPicTarget, pAbsStartAt=#SCS_PARAM_NOT_SET)
Declare showFrame(pAudPtr, pVidPicTarget)
Declare showMyVideoFrame(pAudPtr, nPos, bCalledBySAM=#False)
Declare playResFile(nDevNo, nResId, sResType.s, fBVLevel.f, fPan.f)
Declare setLevelsVideo(pAudPtr, nDev, fBVLevel.f, fPan.f, pVidPicTarget)
Declare setAlphaBlend(pAudPtr, pReqdAlphaBlend)
Declare closeVideo(pAudPtr)
Declare getFileFormat(sFileName.s, bTrace=#False)
Declare.s decodeFileFormat(nFileFormat)
Declare GetShellThumbnail(FileName$, Image, Width, Height, Depth = #PB_Image_DisplayFormat)
Declare freeAudImages(pAudPtr)
Declare logCreateImage(nCallPointForCreate, nImageNo, nAudPtr=-1, nVidPicTarget=#SCS_VID_PIC_TARGET_NONE, sComment.s="", sExtraInfo.s="")
Declare logFreeImage(nCallPointForFree, nImageNo)
Declare listImageLog()
Declare adjustLevelOfPlayingCues(nDirection, bLastPlayingAudioCueOnly=#False)
Declare setScreenWindowsVisible(nScreenNo, bVisible)
Declare checkFileChanged(pAudPtr)
Declare lockAllMixerStreamsProc(pProcName.s, bLock, bForce=#False, bTrace=#False)
Declare findFirstLinkedAud()
Declare setAudioDriverGlobalFlags()
Declare setCurrAudioDriver(nAudioDriver)
Declare getPrimaryPhysDevPtr(nAudioDriver)
Declare freeMixerStreams()
Declare.l initBassNoSoundDev()
Declare initBassForSession()
Declare initBassIfReqd()
Declare freeBassNoSoundDev()
Declare comparePhysDevDescs(sPhysDev1.s, sPhysDev2.s, nPass)
Declare listCuePointArray()
Declare compactCuePointArray()
Declare getCuePointIndex(sFileName.s, sName.s)
Declare.d getCuePointTimePos(sFileName.s, sName.s)
Declare getAnalyzedFileIndex(sFileName.s)
Declare isAudPlaying(pAudPtr)
Declare reloadDevices(nAudioDriver)
Declare copyPosSizeAndAspectToClipboard(pAudPtr)
Declare pastePosSizeAndAspectFromClipboard(pAudPtr)
Declare paintPictureAtPosAndSize(pAudPtr, pTargetCanvasOrImage, pSourceImage, bTargetIsCanvas=#True, bForceTrace=#False)
Declare adjustVideoPosAndSize3(pAudPtr, pVidPicTarget, bTrace=#False)
Declare doTestLiveInput(nInputDevNo, nOutputDevNo)
Declare adjustTestLiveInputLevel(nInputDevNo, nOutputDevNo)
Declare stopTestLiveInput()
Declare getDSDeviceCount()
Declare getASIODeviceCount()
Declare freeDeadGaplessStreams()
Declare listStreamStatuses()
Declare calcAspectRatioType(nSourceWidth, nSourceHeight, nAspect)
Declare clearMonitor(pVidPicTarget)
Declare hideMonitorsNotInUse()
Declare hideVideoWindowIfNotInUse(pVidPicTarget)
Declare hideVideoWindowsNotInUse()
Declare clearVideoCanvasIfNotInUse(pVidPicTarget)
Declare setVideoRendererFlag(nVideoPlaybackLibrary)
Declare getVideoRendererForScreen(nScreenNo)
Declare setTimeLineVidPicTargets(pSubPtr, pVidPicTarget)
Declare reposAtNextAud(pAudPtr)
Declare setAudLevelsForSubAorP(pSubPtr)
Declare setMMediaGaplessSeqPtr()
Declare checkOKToOpenGaplessVideo(pAudPtr)
Declare checkOKToOpenVideoFile(pAudPtr)
Declare freeSomeImages(pAudPtr, pMaxCuesToClose=5)
Declare primeVideoForTarget(pAudPtr, pVidPicTarget, bClearStatusLineAfterPrime)
Declare checkForPrimeVideoReqd()
Declare checkManyFilesOK(nFileCount)
Declare setLockMixerStreamInds(pCuePtr=-1)
Declare setVideoChannelAssigned(pChannel.l, bAssigned)
Declare getVideoChannelAssigned(pChannel.l)
Declare closeAudIfAllInputsOff(pAudPtr)
Declare muteAllPlayingInputs(pExcludingAudPtr)
Declare setInputOnOffCounts(pAudPtr, bPrimaryFile=#True)
Declare processInputsOff(pAudPtr)
Declare IsScreenReqd(nScreenNo)
Declare playNextAud(pThisAudPtr, pNextAudPtr)
Declare assignCanvases(pSubPtr=-1, pAudPtr=-1, bTrace=#False)
Declare setNextCanvasesVisible(pFromCuePtr=-1)
Declare checkVideoGaplessStreamPlaying()
Declare unloadCurrVideoGaplessStreamIfNotPlaying()
Declare openVideoGaplessStreamForEditor(nPrimaryVidPicTarget)
Declare getAudVideoChannelForTarget(pAudPtr, pVidPicTarget)
Declare openNextAudsForSubA(pSubPtr, pVidPicTarget)
Declare doAudFade(pAudPtr)
Declare rewindAudsWithPlayFromPosSet()
Declare freeLogoImages()
Declare freeLogoImagesIfRequired()
Declare buildAudDevMaskForCue(pCuePtr)
Declare saveBlendedImage(pAudPtr, pVidPicTarget)
Declare clearPtrsFromVidPicTargets()
Declare videoFileRequester(sRequesterTitle.s, bAllowMultiSelect=#False, nWindowNo=#WED)
Declare startAnimatedImageTimer(pAudPtr)
Declare moveAudPictureToPrimary(pAudPtr, pPrimaryVidPicTarget)
Declare hidePicture(pAudPtr, pPrimaryVidPicTarget, bIgnoreDelayHide=#False)
Declare countReadyVideos(bExcludeHotkeysEtc=#True)
Declare createVideoWindows()
Declare displayOrHideVideoWindows()
Declare isVideoDisplayDefault(pAudPtr)
Declare isVideoPosAndSizeDefault(pAudPtr)
Declare listVidPicTargets(nMinVidPicTarget=0, nMaxVidPicTarget=#SCS_VID_PIC_TARGET_LAST)
Declare createMemoryImageForAud(pAudPtr)
Declare checkVideoFadesExist()
Declare setNew2DDrawingInd(pSubPtr)
Declare checkUse2DDrawing(pSubPtr=-1)
Declare RotateLeft90(nImage)
Declare RotateRight90(nImage)
Declare checkif_VidCapDevsDefined()

Declare calcAudLoudness(pAudPtr, pNormalizationType)
