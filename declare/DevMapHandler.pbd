Declare initDevMapHandler()
Declare setDefaultVidAudDeviceIfReqd(bPrimaryFile, bUseDevChgs=#False)
Declare openAndReadXMLDevMapFile(bPrimaryFile, bInDevChgs=#False, bCreateFromTemplate=#False, bTemplate=#False)
Declare.s getDevGrpDesc(nDevGrp)
Declare getDevGrpFromDevDevType(nDevType)
Declare checkDevMap(nDevMapPtr)
Declare setDevChgsDevStatus(nDevMapDevPtr, nDevGrp, nDevNo)
Declare addDevMapCheckItem(*rDev.tyDevMapDev, sCheckMsg.s, nCheckResult)
Declare addDevMapCheckItemForDevGrp(nDevGrp, sCheckMsg.s, nCheckResult)
Declare clearIgnoreDevThisRunInds()
Declare setIgnoreDevThisRunInds()
Declare loadDMXStartChannelsIfReqd(*rProd.tyProd, *rDevMapdev.tyDevMapDev)
Declare loadDevMapLightingFixturesIfReqd(*rProd.tyProd, *rDevMapDev.tyDevMapDev)
Declare checkDevMapCommon(nDevMapPtr, bInDevChgs=#False)
Declare createInitialDevMapForProd()
Declare createMissingLightingDevsForDevMap(nDevMapPtr)
Declare createMissingCtrlSendDevsForDevMap(nDevMapPtr)
Declare createMissingCueCtrlDevsForDevMap(nDevMapPtr)
Declare.s build1BasedOutputRangeString(nFirst1BasedOutputChan, nNrOfOutputChans, nPhysicalDevPtr)
Declare.s make0BasedInputRangeString(s1BasedInputRange.s)
Declare.s build1BasedInputRangeString(nFirst1BasedInputChan, nNrOfInputChans, nPhysicalDevPtr)
Declare.s getDevMapName(nDevMapPtr)
Declare.s getDevChgsDevMapName(nDevMapPtr)
Declare.s getDevMapForImportName(nDevMapPtr)
Declare getDevMapPtr(*rMaps.tyMaps, sDevMapName.s)
Declare getDevMapPtrForSelectedDevMap(*rMaps.tyMaps)
Declare getDevMapPtrForDevMapId(*rMaps.tyMaps, nDevMapId)
Declare getDevMapDevPtrForLogicalDev(*rMaps.tyMaps, nDevGrp, sLogicalDev.s, nUseDevMapPtr=-1)
Declare getDevChgsDevPtrForDevId(nDevGrp, nDevId, nUseDevMapPtr=-1)
Declare getDevMapDevPtrDevId(nDevGrp, nDevId, nUseDevMapPtr=-1)
Declare getDevChgsDevPtrForDevNo(nDevGrp, nDevNo)
Declare getMaxDevForDevGrp(*rProd.tyProd, nDevGrp)
Declare getDevMapDevPtrForDevNo(nDevGrp, nDevNo)
Declare updateDevChgsDev(nDevGrp, nDevType, nDevNo, sLogicalDev.s)
Declare addDevToDevChgsDevMap(nDevGrp, nDevType, nDevId, sLogicalDev.s, nNrOfOutputChans=0, nNrOfInputChans=0, nUseDevMapPtr=-1, *rImportDevMapDev.tyDevMapDev=0)
Declare loadDevMapsForDevChgs(bProcessingUndoDevChgs=#False)
Declare applyDevMapsForDevChgs()
Declare getFirst1BasedChanFromRange(s1BasedOutputRange.s)
Declare getNumChansFromRange(s1BasedOutputRange.s)
Declare setDevChgsPhysDevIfReqd(nDevMapDevPtr, nDevNo)
Declare countAudioOutputsRequested(*prProd.tyProd)
Declare listDevMap(*rDevMap.tyDevMap, Array aDevMapDev.tyDevMapDev(1), sDevMapArray.s)  ; (1) means array supports 1 dimension
Declare summarizeDevMap(*rDevMap.tyDevMap, Array aDevMapDev.tyDevMapDev(1))  ; (1) means array supports 1 dimension
Declare listAllDevMaps()
Declare listAllDevMapsForDevChgs()
Declare listAllDevMapsForImport()
Declare summarizeAllDevMaps()
Declare summarizeAllDevMapsForDevChgs()
Declare findValidDevMap(nDevMapPtr, sCueFile.s)
Declare checkDevMapForCheckerSMSOutputsUsed(nDevMapPtr)
Declare checkDevMapForCheckerDSOutputsUsed(*rDev.tyDevMapDev)
Declare setBassInfoInDevMapForChecker(nDevMapPtr)
Declare.s buildCueCtrlLogicalDev(nDevNo)
Declare resetDevMapForDevChgsDevPtrs(bSkipRemovals=#False)
Declare changeDevChgsDevMapDevsLogicalDev(nDevGrp, sOldLogicalDev.s, sNewLogicalDev.s)
Declare resetDevMapForDevChgs(nDevMapId)
Declare setDevChgsDevDefaults(nDevMapDevPtr, bIncludePort=#False)
Declare getPhysDevPtrForLogicalDev(*rMaps.tyMaps, nDevGrp, sLogicalDev.s)
Declare getCtrlNetworkRemoteDevForPhysicalDevPtr(nCSPhysicalDevPtr)
Declare updateDevMapPhysicalDevPtrs()
Declare adjustPhysDevsForNewAudioDriver()
Declare setInputDevMapDevPtrs(pAudPtr)
Declare holdDevMapFile(sDevMapFile.s)
Declare deleteMarkedDevMaps()
Declare removeDeadDevMaps()
Declare validateDevMaps()
Declare setDevMapPtrs(bPrimaryFile=#True)
Declare addMissingDevsToDevChgsDevMaps()
Declare removeMissingDevsFromDevChgsDevMaps()
Declare copyDevStatesFromDevChgsToDev()
Declare openLightingAndCueCtrlDMXDevsIfReqd()
Declare addCommonDevItems(*nDeviceNode, nDevIndex)
Declare.s writeXMLDevMapFile(sSelectedDevMapName.s, sProdId.s, bSaveToProdFolder=#False, bSaveToExportFile=#False, bSaveToTemplateFolder=#False)
Declare scanXMLDevMaps(*CurrentNode, CurrentSublevel)
Declare scanXMLDevMaps2(*CurrentNode, CurrentSublevel)
Declare scanXMLDevMaps3(*CurrentNode, CurrentSublevel, sDevMapFile.s)
Declare.s lookForBestMatchingDevMapFile(sThisCueFile.s)
Declare.s readXMLDevMapFile(bPrimaryFile, sDevMapFile.s)
Declare importDeviceMapFile(sCueFile.s, sImportFile.s, sDevMapFile.s)
Declare scanXMLTemplateDevMapFile(*CurrentNode, CurrentSublevel)
Declare.s readXMLTemplateDevMapFile(sFileName.s)
Declare scanXMLTemplateDevMap(*CurrentNode, CurrentSublevel, nTemplatePtr)
Declare saveXMLTemplateDevMapFile(nTemplatePtr, bCreateFromCueFile)
Declare syncFixturesInDev(*rProd.tyProd, *rMaps.tyMaps)
Declare getDevMapFixtureIndexForFixtureCode(*rMaps.tyMaps, sLogicalDev.s, sFixtureCode.s)
Declare syncOutputChans(bPrimaryFile)
Declare populateDevStartChannelArray(*rDev.tyDevMapDev)
Declare populateAllDevStartChannelArrays()
Declare setConnectWhenReqdForDevs()
Declare.s deriveCueFileNameFromDevMapFileName(sDevMapFileName.s)
Declare changeOfDevMap(nNewDevMapPtr)
Declare createNewDevMapFromExistingDevMap(nDevMapPtr)
